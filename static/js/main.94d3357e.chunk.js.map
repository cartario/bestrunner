{"version":3,"sources":["components/header.jsx","components/session.jsx","components/sessions.jsx","components/filter.jsx","components/chart.jsx","components/main.jsx","components/footer.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Wrapper","styled","header","props","theme","font","Nav","nav","secondary","Logo","div","primary","mobile","Menu","Header","Session","li","Date","span","Type","p","Distance","Info","mock","type","date","getFullYear","id","distance","onClick","console","log","width","src","mocks","List","ul","Sessions","map","item","key","Item","style","margin","padding","minHeight","backgroundColor","main","Main","footer","Footer","bgc","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94d3357e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.header`  \r\n  text-align: center;\r\n  font-family: ${props=>props.theme.font};  \r\n`;\r\n\r\nconst Nav = styled.nav`\r\n  display: flex;  \r\n  color: white; \r\n  cursor: pointer; \r\n  background-color: ${props=>props.theme.secondary};  \r\n\r\n  \r\n`;\r\n\r\nconst Logo = styled.div`\r\n  width: 10%;\r\n  padding: 10px;\r\n  border: 1px solid white;  \r\n\r\n  &:hover{\r\n    color: ${props=>props.theme.primary};\r\n  }\r\n\r\n  &:active{\r\n    color: white;\r\n  }\r\n  \r\n  @media (max-width: ${props=>props.theme.mobile}) {\r\n    display: none;    \r\n`;\r\n\r\nconst Menu = styled.div`\r\n  width: 90%;\r\n  padding: 10px;\r\n  border: 1px solid white;\r\n\r\n  &:hover{\r\n    color: ${props=>props.theme.primary};\r\n  }\r\n\r\n  &:active{\r\n    color: white;\r\n  }\r\n    \r\n  @media (max-width: ${props=>props.theme.mobile}){\r\n    width: 100%;\r\n    padding: 20px;\r\n  }\r\n`;\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Nav>\r\n        <Logo>[Logo]</Logo>\r\n        <Menu>[Menu]</Menu>\r\n      </Nav>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Session = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;  \r\n  margin: 10px;\r\n  padding: 10px;\r\n  text-align: center;  \r\n  color: ${props=>props.theme.secondary};\r\n  background-color: white;\r\n  border-radius: 5px; \r\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22); \r\n\r\n  &:hover{\r\n    background-color: grey;    \r\n  }\r\n`;\r\n\r\nconst Date = styled.span`\r\n  display:block;  \r\n  width: 15%;\r\n  height: 17px;\r\n  border: 1px dashed ${props=>props.theme.secondary};\r\n  border-radius: 5px; \r\n  color: black;   \r\n`;\r\n\r\nconst Type = styled.p`\r\n  width: 40%;\r\n  display: inline-block;  \r\n  margin: 0;\r\n  font-size: 30px;\r\n  border: 1px dashed black;\r\n  border-radius: 5px;\r\n  color: black;  \r\n`;\r\n\r\nconst Distance = styled(Type)`\r\n  width: 30%;\r\n`;\r\n\r\nconst Info = styled.div` \r\n  width: 15%;\r\n`;\r\n\r\nexport default ({mock}) => {\r\n  return (\r\n    <Session>      \r\n      <Type>{mock.type}</Type>\r\n      <Date>{mock.date.getFullYear()}</Date>\r\n      <Distance>Session-{mock.id} - {mock.distance}km</Distance>\r\n      <Info onClick={()=>console.log(`info${mock.id}`)}>\r\n        <img width=\"50\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Info_Simple_bw.svg/768px-Info_Simple_bw.svg.png\"/>\r\n      </Info>\r\n    </Session>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Session from './session';\r\n\r\nconst mocks = [\r\n  {\r\n    id: 1,\r\n    type: `Велосипед`,\r\n    date: new Date(),\r\n    distance: 10,\r\n  },\r\n  {\r\n    id: 2,\r\n    type: `Бег`,\r\n    date: new Date(),\r\n    distance: 15,\r\n  },\r\n  {\r\n    id: 3,\r\n    type: `Лыжи`,\r\n    date: new Date(),\r\n    distance: 5,\r\n  },\r\n  {\r\n    id: 4,\r\n    type: `Плавание`,\r\n    date: new Date(),\r\n    distance: 7,\r\n  },\r\n  {\r\n    id: 5,\r\n    type: `Ходьба`,\r\n    date: new Date(),\r\n    distance: 11,\r\n  }\r\n];\r\n\r\nconst List = styled.ul`\r\n  margin:0;\r\n  padding:0;\r\n  list-style: none;  \r\n`;\r\n\r\nconst Sessions = () => {\r\n  return (\r\n    <List>\r\n      {mocks.map((item)=><Session key={item.id} mock={item}/>)}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default Sessions;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  width: 85%;\r\n  margin: 0px;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  list-style: none;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  width: 20%;\r\n  color: grey;\r\n  cursor: pointer;\r\n  text-align: right;\r\n`;\r\n\r\nexport default (props) => {\r\n  return (\r\n    <List>\r\n      <Item>Type</Item>\r\n      <Item>Date</Item>\r\n      <Item>Distance</Item>\r\n    </List>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport default (props)=>{\r\n  return (\r\n    <section style={{margin:0, padding: 0,minHeight: `300px`, backgroundColor: `lightgreen`}}>chart</section>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Sessions from './sessions';\r\nimport Filter from './filter';\r\nimport Chart from './chart';\r\n\r\nconst Wrapper = styled.main`  \r\n\r\n  text-align: center;\r\n  font-family: ${props=>props.theme.font}; \r\n  background-color: lightgrey; \r\n`;\r\n\r\nconst Main = () => {\r\n  return (\r\n    <Wrapper>\r\n      <h1 style={{margin:0, padding: `20px`}}>BestRunner</h1>\r\n      <Filter/>\r\n      <Sessions/>\r\n      <Chart/>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.footer` \r\n  text-align: center;\r\n  font-family: ${props=>props.theme.font};\r\n  background-color: ${props=>props.theme.secondary};\r\n  color: white;\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n  justify-content: space-around;  \r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  @media (max-width:${props=>props.theme.mobile}){\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst Item = styled.li`\r\n  padding: 10px;\r\n  cursor: pointer;\r\n\r\n  &:hover{\r\n    color: ${props=>props.theme.primary};\r\n  }\r\n\r\n  &:active{\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Wrapper>\r\n      <List>\r\n        <Item>[Copyright]</Item>\r\n        <Item>[Социальные сети]</Item>\r\n        <Item>[Адрес]</Item>\r\n      </List>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport {ThemeProvider} from 'styled-components';\r\nimport Header from './header';\r\nimport Main from './main'\r\nimport Footer from './footer';\r\n\r\nconst theme = {\r\n  primary: `#3B5AF5`,\r\n  secondary: `tomato`,\r\n  bgc: `white`,\r\n  mobile: `660px`,\r\n  font: `Poppins`,\r\n};\r\n\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      \r\n        <Header/>\r\n        <Main/>\r\n        <Footer/>\r\n      \r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}