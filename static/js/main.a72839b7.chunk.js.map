{"version":3,"sources":["components/header.jsx","components/session.jsx","components/sessions.jsx","components/filter.jsx","components/chart.jsx","components/create-session.jsx","components/main.jsx","components/footer.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Wrapper","styled","header","props","theme","font","Nav","nav","primary","Logo","div","secondary","mobile","Menu","Header","Session","li","Date","span","Type","p","Distance","Info","mock","type","date","getFullYear","distance","onClick","console","log","id","width","src","mocks","List","ul","Sessions","map","item","key","Item","style","margin","padding","minHeight","data","labels","datasets","barPercentage","backgroundColor","borderColor","borderWidth","options","title","display","text","fontSize","legend","button","pink","main","Main","footer","Footer","bgc","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a72839b7.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.header`  \n  text-align: center;\n  font-family: ${props=>props.theme.font};  \n`;\n\nconst Nav = styled.nav`\n  display: flex;  \n  color: white; \n  cursor: pointer; \n  background-color: ${props=>props.theme.primary};  \n\n  \n`;\n\nconst Logo = styled.div`\n  width: 10%;\n  padding: 10px;\n  border: 1px solid white;  \n\n  &:hover{\n    color: ${props=>props.theme.secondary};\n  }\n\n  &:active{\n    color: white;\n  }\n  \n  @media (max-width: ${props=>props.theme.mobile}) {\n    display: none;    \n`;\n\nconst Menu = styled.div`\n  width: 90%;\n  padding: 10px;\n  font-weight: bold;\n  border: 1px solid white;\n\n  &:hover{\n    color: ${props=>props.theme.secondary};\n  }\n\n  &:active{\n    color: white;\n  }\n    \n  @media (max-width: ${props=>props.theme.mobile}){\n    width: 100%;\n    padding: 20px;\n  }\n`;\n\nconst Header = () => {\n  return (\n    <Wrapper>\n      <Nav>\n        <Logo>[Logo]</Logo>\n        <Menu>[BEST RUNNER]</Menu>\n      </Nav>\n    </Wrapper>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Session = styled.li`\n  display: flex;\n  justify-content: space-between;  \n  max-height: 50px;\n  padding: 10px;\n  text-align: left;  \n  \n  color: ${props=>props.theme.secondary};\n  background-color: white;\n  \n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22); \n\n  &:hover{\n    background-color: lightgrey;    \n  }\n`;\n\nconst Date = styled.span`\n  display:block;  \n  width: 15%;\n  height: 17px;\n  \n  border-radius: 5px; \n  color: black;   \n`;\n\nconst Type = styled.p`\n  width: 40%;\n  height: 30px;\n  display: inline-block;  \n  margin: 0;  \n  \n  border-radius: 5px;\n  color: black;  \n`;\n\nconst Distance = styled(Type)`\n  width: 30%;\n`;\n\nconst Info = styled.div` \n  width: 15%;\n`;\n\nexport default ({mock}) => {\n  return (\n    <Session>      \n      <Type>{mock.type}</Type>\n      <Date>{mock.date.getFullYear()}</Date>\n      <Distance>{mock.distance}km</Distance>\n      <Info onClick={()=>console.log(`info${mock.id}`)}>\n        <img width=\"15\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/Info_Simple_bw.svg/768px-Info_Simple_bw.svg.png\"/>\n      </Info>\n    </Session>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport Session from './session';\n\nconst mocks = [\n  {\n    id: 1,\n    type: `Велосипед`,\n    date: new Date(),\n    distance: 10,\n  },\n  {\n    id: 2,\n    type: `Бег`,\n    date: new Date(),\n    distance: 15,\n  },\n  {\n    id: 3,\n    type: `Лыжи`,\n    date: new Date(),\n    distance: 5,\n  },\n  {\n    id: 4,\n    type: `Плавание`,\n    date: new Date(),\n    distance: 7,\n  },\n  {\n    id: 5,\n    type: `Ходьба`,\n    date: new Date(),\n    distance: 11,\n  }\n];\n\nconst List = styled.ul`\n  margin:0;\n  padding:0;\n  list-style: none;\n`;\n\nconst Sessions = () => {\n  return (\n    <List>\n      {mocks.map((item)=><Session key={item.id} mock={item}/>)}\n    </List>\n  );\n};\n\nexport default Sessions;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n  display: flex;\n  \n  width: 100%;\n  margin: 0px;\n  \n  padding: 2px 10px;\n  box-sizing: border-box;\n  font-size: 18px;\n  font-weight: bold;\n  list-style: none;\n  border-bottom: 1px solid white;\n`;\n\nconst Item = styled.li`\n  width: ${props=>props.width}%;\n  \n  color: grey;\n  cursor: pointer;\n  text-align: left;  \n\n  &:hover{\n    transform: scale(1.1);\n  }\n\n  &:active{\n    color: ${props=>props.theme.secondary}\n  }\n`;\n\nexport default (props) => {\n  return (\n    <List>\n      <Item width={40}>Type</Item>\n      <Item width={15}>Date</Item>\n      <Item width={15}>Distance</Item>\n      \n    </List>\n  );\n};\n","import React from 'react';\nimport {Bar} from 'react-chartjs-2';\n\nexport default (props)=>{\n\n\n  const state = {\n    labels: [`timeWork`,`timeFlight`,`timeBlock`,`timeNight`,`timeBiologicalNight`],\n    datasets: [\n      { \n        barPercentage: 0.5,         \n        backgroundColor: 'rgba(75,192,192,1)',\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 1,\n        data: [1,2,3,4,5],\n      }\n    ]\n  };\n  return (\n    <section \n    style={{margin:0, padding: `20px`,minHeight: `280px`}}>\n      <Bar       \n      data={state}\n      options={{\n        title:{\n          display: true,\n          text:'Сводные данные за текущий период',\n          fontSize: 20\n        },\n        legend:{\n          display:false, \n        },        \n      }}\n    />\n    </section>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.button`\n  position: fixed;  \n  z-index: 1;\n  bottom: 20px;\n  right: 30px;\n  display: block;\n  width: 100px;\n  height: 100px;\n  font-size: 50px;\n  background-color: ${props=>props.theme.pink};\n  outline: none;\n  border: none;\n  color: white;\n  border-radius: 50%;  \n  transition: 0.5s transform ease;\n\n  &:hover{\n    transform: scale(1.5);\n  }\n\n  &:active{\n    background-color: grey;\n  }\n`;\n\nexport default (props)=>{\n  return (\n    <Wrapper onClick={()=>console.log(`plus`)}>\n      +\n    </Wrapper>\n  );\n};","import React from 'react';\nimport styled from 'styled-components';\nimport Sessions from './sessions';\nimport Filter from './filter';\nimport Chart from './chart';\nimport CreateSession from './create-session';\n\nconst Wrapper = styled.main`  \n\n  text-align: center;\n  font-family: ${props=>props.theme.font}; \n  background-color: white; \n`;\n\nconst Main = () => {\n  return (\n    <Wrapper>\n      <h1 style={{display: `none`}}>BestRunner</h1>\n      <Filter/>\n      <Sessions/>\n      <Chart/>\n      <CreateSession/>\n    </Wrapper>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.footer` \n  text-align: center;\n  font-family: ${props=>props.theme.font};\n  background-color: ${props=>props.theme.primary};\n  color: white;\n`;\n\nconst List = styled.ul`\n  display: flex;\n  justify-content: space-around;  \n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  @media (max-width:${props=>props.theme.mobile}){\n    flex-direction: column;\n  }\n`;\n\nconst Item = styled.li`\n  padding: 10px;\n  cursor: pointer;\n\n  &:hover{\n    color: ${props=>props.theme.secondary};\n  }\n\n  &:active{\n    color: white;\n  }\n`;\n\nconst Footer = () => {\n  return (\n    <Wrapper>\n      <List>\n        <Item>[Copyright]</Item>\n        <Item>[Социальные сети]</Item>\n        <Item>[Адрес]</Item>\n      </List>\n    </Wrapper>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport {ThemeProvider} from 'styled-components';\nimport Header from './header';\nimport Main from './main'\nimport Footer from './footer';\n\nconst theme = {\n  primary: `#3B5AF5`,\n  secondary: `tomato`,\n  pink: `#F9057C`,\n  bgc: `white`,\n  mobile: `660px`,\n  font: `Poppins`,\n};\n\n\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      \n        <Header/>\n        <Main/>\n        <Footer/>\n      \n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}