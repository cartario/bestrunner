{"version":3,"sources":["components/header.jsx","components/session.jsx","components/sessions.jsx","components/main.jsx","components/footer.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Wrapper","styled","header","props","theme","font","Nav","nav","bgc","Logo","div","primary","secondary","mobile","Menu","Header","Session","li","id","List","ul","Sessions","map","item","key","main","Main","footer","Item","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sjCAGA,IAAMA,EAAUC,IAAOC,OAAV,KAEI,SAAAC,GAAK,OAAEA,EAAMC,MAAMC,QAI9BC,EAAML,IAAOM,IAAV,KAIa,SAAAJ,GAAK,OAAEA,EAAMC,MAAMI,OAGnCC,EAAOR,IAAOS,IAAV,KAMG,SAAAP,GAAK,OAAEA,EAAMC,MAAMO,WAInB,SAAAR,GAAK,OAAEA,EAAMC,MAAMQ,aAGT,SAAAT,GAAK,OAAEA,EAAMC,MAAMS,UAIpCC,EAAOb,IAAOS,IAAV,KAMG,SAAAP,GAAK,OAAEA,EAAMC,MAAMO,WAInB,SAAAR,GAAK,OAAEA,EAAMC,MAAMQ,aAGT,SAAAT,GAAK,OAAEA,EAAMC,MAAMS,UAiB3BE,EAXA,WACb,OACE,kBAACf,EAAD,KACE,kBAACM,EAAD,KACE,kBAACG,EAAD,eACA,kBAACK,EAAD,kB,2GCtDR,IAAME,EAAUf,IAAOgB,GAAV,KAEF,SAAAd,GAAK,OAAEA,EAAMC,MAAMQ,aAGf,cAAW,IAATM,EAAQ,EAARA,GACf,OACE,kBAACF,EAAD,gBACWE,I,4FCPf,IAAMC,EAAOlB,IAAOmB,GAAV,KAYKC,EARE,WACf,OACE,kBAACF,EAAD,KACG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAGG,KAAI,SAACC,GAAD,OAAQ,kBAAC,EAAD,CAASC,IAAKD,EAAML,GAAIK,S,mJCPvD,IAAMvB,EAAUC,IAAOwB,KAAV,KAEI,SAAAtB,GAAK,OAAEA,EAAMC,MAAMC,QAarBqB,EATF,WACX,OACE,kBAAC,EAAD,KACE,0CACA,kBAAC,EAAD,Q,ulBCXN,IAAM1B,EAAUC,IAAO0B,OAAV,KAGI,SAAAxB,GAAK,OAAEA,EAAMC,MAAMC,QACd,SAAAF,GAAK,OAAEA,EAAMC,MAAMI,OAInCW,EAAOlB,IAAOmB,GAAV,KAOY,SAAAjB,GAAK,OAAEA,EAAMC,MAAMS,UAKnCe,EAAO3B,IAAOgB,GAAV,KAKG,SAAAd,GAAK,OAAEA,EAAMC,MAAMO,WAInB,SAAAR,GAAK,OAAEA,EAAMC,MAAMQ,aAgBjBiB,EAZA,WACb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACD,EAAD,oBACA,kBAACA,EAAD,gGACA,kBAACA,EAAD,4CCpCFxB,EAAQ,CACZO,QAAQ,UACRC,UAAU,UACVJ,IAAI,YACJK,OAAO,QACPR,KAAK,WAiBQyB,EAZH,WACV,OACE,kBAAC,IAAD,CAAe1B,MAAOA,GAElB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCVY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96ab9ade.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.header`  \n  text-align: center;\n  font-family: ${props=>props.theme.font};\n  background-color: white;  \n`;\n\nconst Nav = styled.nav`\n  display: flex;  \n  color: black; \n  cursor: pointer; \n  background-color: ${props=>props.theme.bgc};  \n`;\n\nconst Logo = styled.div`\n  width: 10%;\n  padding: 10px;\n  border: 1px solid white;  \n\n  &:hover{\n    color: ${props=>props.theme.primary};\n  }\n\n  &:active{\n    color: ${props=>props.theme.secondary};\n  }\n  \n  @media (max-width: ${props=>props.theme.mobile}) {\n    display: none;    \n`;\n\nconst Menu = styled.div`\n  width: 90%;\n  padding: 10px;\n  border: 1px solid white;\n\n  &:hover{\n    color: ${props=>props.theme.primary};\n  }\n\n  &:active{\n    color: ${props=>props.theme.secondary};\n  }\n    \n  @media (max-width: ${props=>props.theme.mobile}){\n    width: 100%;\n    padding: 20px;\n  }\n`;\n\nconst Header = () => {\n  return (\n    <Wrapper>\n      <Nav>\n        <Logo>[Logo]</Logo>\n        <Menu>[Menu]</Menu>\n      </Nav>\n    </Wrapper>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Session = styled.li`\ntext-align: center;\n  color: ${props=>props.theme.secondary};\n`;\n\nexport default ({id}) => {\n  return (\n    <Session>\n      Session-{id}\n    </Session>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport Session from './session';\n\nconst List = styled.ul`\n  list-style: none;\n`;\n\nconst Sessions = () => {\n  return (\n    <List>\n      {[1,2,3,4,5].map((item)=><Session key={item} id={item}/>)}\n    </List>\n  );\n};\n\nexport default Sessions;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Sessions from './sessions';\n\nconst Wrapper = styled.main`  \n  text-align: center;\n  font-family: ${props=>props.theme.font};\n  background-color: white;  \n`;\n\nconst Main = () => {\n  return (\n    <Wrapper>\n      <h1>BestRunner</h1>\n      <Sessions/>\n    </Wrapper>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.footer`\n  margin-top: 15px;\n  text-align: center;\n  font-family: ${props=>props.theme.font};\n  background-color: ${props=>props.theme.bgc};\n  color: black;\n`;\n\nconst List = styled.ul`\n  display: flex;\n  justify-content: space-around;  \n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  @media (max-width:${props=>props.theme.mobile}){\n    flex-direction: column;\n  }\n`;\n\nconst Item = styled.li`\n  padding: 10px;\n  cursor: pointer;\n\n  &:hover{\n    color: ${props=>props.theme.primary};\n  }\n\n  &:active{\n    color: ${props=>props.theme.secondary};\n  }\n`;\n\nconst Footer = () => {\n  return (\n    <Wrapper>\n      <List>\n        <Item>[Copyright]</Item>\n        <Item>[Социальные сети]</Item>\n        <Item>[Адрес]</Item>\n      </List>\n    </Wrapper>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport {ThemeProvider} from 'styled-components';\nimport Header from './header';\nimport Main from './main'\nimport Footer from './footer';\n\nconst theme = {\n  primary: `#3B5AF5`,\n  secondary: `#F9057C`,\n  bgc: `lightgrey`,\n  mobile: `660px`,\n  font: `Poppins`,\n};\n\n\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      \n        <Header/>\n        <Main/>\n        <Footer/>\n      \n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}